Why Stream?

Stream - like flowing something
Stream is a sequence of elements from a source that supports data processing operations.
Streams are an update to the Java API that let you manipulate collections of data in a declarative way.
manipulate collections - do some action, like sorting, get element and double etc.
Stream Pipeline is the operations that run on a stream to produce a result.

Stream pipeline steps:

1. Data source most likely Collection, ArrayList
2. create stream from source, convert to stream
3. start implementing certain operation on that data, sort, filter, convert, map etc
4. Do Terminal operation, once you done with operation you need to exit from operation line
5. Output, like aggregate result. e.g count, sum or collection etc


map -- VS --- flatMap()

map() takes Stream<T> as input and returns Stream<R>
It is mapper function produces single value for each input value. It is called One-To-One mapping

flatMap() takes Stream<Stream<T>> Stream of Stream as an input and return Stream<R>.
It is called One-To-Many mapping

Stream.of(1,2,3,4) -> [1,2,3,4]
[ [1,2], [3,4], [5,6], [7,8] ] -> Return [1,2,3,4,5,6,7,8]
